generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  firstName String
  lastName  String?
  phone     String?
  fileId    String?  @unique
  gender    String?
  createdAt DateTime @default(now()) @map("created_at")

  file  File?   @relation(fields: [fileId], references: [id])
  store Store?
  Token Token[]

  @@map("users")
}

model Store {
  id              String   @id @default(uuid())
  name            String
  slogan          String?
  slug            String   @unique
  email           String
  shippingAddress String?  @map("shipping_address")
  country         String
  userId          String   @unique @map("user_id")
  createdAt       DateTime @default(now()) @map("created_at")

  user          User           @relation(fields: [userId], references: [id])
  products      Product[]
  orders        Order[]
  storeSettings StoreSettings?

  @@map("stores")
}

model StoreSettings {
  storeId           String  @id @unique
  needCustomerName  Boolean @default(false)
  needCustomerPhone Boolean @default(false)
  needCustomerEmail Boolean @default(false)

  store Store @relation(fields: [storeId], references: [id])
}

model Product {
  id                  String   @id @default(uuid())
  name                String
  price               Decimal
  stock               Int      @default(0)
  description         String?
  slug                String   @unique
  discount            Int      @default(0)
  canSellWithoutStock Boolean  @default(false)
  storeId             String   @map("store_id")
  createdAt           DateTime @default(now()) @map("created_at")

  store         Store           @relation(fields: [storeId], references: [id])
  Product_Image Product_Image[]

  @@index([storeId])
  @@map("products")
}

model Product_Image {
  id        String @id @default(cuid())
  productId String
  fileId    String

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  file    File    @relation(fields: [fileId], references: [id], onDelete: Cascade)

  @@index([productId])
  @@index([fileId])
}

model File {
  id          String    @id @default(cuid())
  name        String
  key         String
  contentType String    @map("content_type")
  type        FileTypes
  createdAt   DateTime  @default(now()) @map("created_at")

  Product_Image Product_Image[]
  User          User?
}

model Order {
  id                 String      @id @default(cuid())
  storeId            String      @map("store_id")
  customerEmail      String?     @map("customer_email")
  customerPhone      String?     @map("customer_phone")
  address            String
  country            String
  city               String
  province           String
  postal             String
  currency           Currency
  totalAmount        Decimal     @map("total_amount")
  status             OrderStatus @default(Approving)
  alternativeAddress String?     @map("alternative_address")
  customerName       String?     @map("customer_name")
  customerNotes      String?     @map("customer_notes")
  createdAt          DateTime    @default(now()) @map("created_at")
  store              Store       @relation(fields: [storeId], references: [id])

  @@index([storeId])
  @@map("orders")
}

model Token {
  id     Int        @id @default(autoincrement())
  value  String
  type   TokenTypes
  userId String

  user User @relation(fields: [userId], references: [id])

  @@index([userId])
  @@map("tokens")
}

enum TokenTypes {
  RESET_PASSWORD
  AUTH_REFRESH_TOKEN
}

enum FileTypes {
  avatar
  storeLogo
  storeBanner
  storeProduct
}

enum OrderStatus {
  Canceled
  Approving
  Preparing
  Delivering
  Delivered
}

enum Currency {
  EUR
  USD
  BRL
  GBP
}
